<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ProduCortex - Task Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=VT323&family=Share+Tech+Mono&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Share Tech Mono', monospace; background-color: #010101; color: #00ff00; background-image: linear-gradient(rgba(0, 255, 0, 0.05) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 255, 0, 0.05) 1px, transparent 1px); background-size: 20px 20px; }
        .eva-panel { background-color: rgba(10, 25, 10, 0.8); border: 1px solid #ff5500; backdrop-filter: blur(2px); box-shadow: 0 0 15px rgba(255, 85, 0, 0.5); }
        .eva-title { font-family: 'VT323', monospace; color: #ff5500; text-shadow: 0 0 5px #ff5500; }
        .eva-input, .description-textarea { background-color: #000; border: 1px solid #00ff00; color: #00ff00; caret-color: #00ff00; }
        .eva-input::placeholder, .description-textarea::placeholder { color: rgba(0, 255, 0, 0.4); }
        .eva-input:focus, .description-textarea:focus { outline: none; box-shadow: 0 0 10px rgba(0, 255, 0, 0.7); border-color: #ff5500; }
        .eva-button { background-color: #ff5500; color: #000; font-weight: bold; border: 1px solid #ff5500; transition: all 0.2s ease-in-out; }
        .eva-button:hover { background-color: #000; color: #ff5500; box-shadow: 0 0 10px rgba(255, 85, 0, 0.7); }
        .eva-button:active { transform: scale(0.98); }
        .task-item-container { border-left: 4px solid #ff5500; background-color: rgba(0,0,0,0.5); transition: all 0.3s ease; animation: slideIn 0.5s ease-out; }
        .task-item-container.completed { border-left-color: #00ff00; }
        .task-item-container.completed .task-title { color: rgba(0, 255, 0, 0.5); text-decoration: line-through; }
        .task-item-container:hover { background-color: rgba(255, 85, 0, 0.2); box-shadow: inset 0 0 10px rgba(255, 85, 0, 0.3); }
        .delete-btn { color: #ff3333; border: 1px solid #ff3333; }
        .delete-btn:hover { background-color: #ff3333; color: #000; }
        .complete-btn { color: #00ff00; border: 1px solid #00ff00; }
        .complete-btn:hover { background-color: #00ff00; color: #000; }
        .task-details { border-top: 1px dashed rgba(0, 255, 0, 0.3); transition: max-height 0.5s ease-in-out; overflow: hidden; }
        .task-title { cursor: pointer; }
        .rendered-markdown { min-height: 50px; cursor: pointer; }
        .rendered-markdown h1, .rendered-markdown h2, .rendered-markdown h3 { color: #ff5500; }
        .rendered-markdown a { color: #00ffff; text-decoration: underline; }
        .rendered-markdown code { background-color: #000; padding: 2px 4px; border-radius: 4px; }
        .rendered-markdown blockquote { border-left: 2px solid #ff5500; padding-left: 10px; color: #aaa; }
        .rendered-markdown ul { list-style-type: square; margin-left: 20px; }
        .view-toggle { border: 1px solid #00ff00; padding: 5px; cursor: pointer; }
        .view-toggle.active { background-color: #ff5500; color: #000; }
        .modal-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7); backdrop-filter: blur(5px); display: flex; align-items: center; justify-content: center; z-index: 999; }
        .header-nav-btn { cursor: pointer; transition: all 0.2s; border: 1px solid #00ff00; padding: 4px 8px; background-color: #000; }
        .header-nav-btn.active, .header-nav-btn:hover { color: #000; background-color: #ff5500; border-color: #ff5500; text-shadow: 0 0 5px #000; }
        .person-card { background-color: rgba(0,0,0,0.5); border-left: 4px solid #00ffff; }
        .assigned-person-avatar { display: inline-block; width: 20px; height: 20px; border-radius: 50%; background-color: #00ffff; color: #000; text-align: center; font-size: 12px; line-height: 20px; font-weight: bold; margin-right: 4px; }
        .mention { color: #00ffff; font-weight: bold; background-color: rgba(0, 255, 255, 0.1); padding: 0 2px; border-radius: 2px;}
        
        /* Honeycomb Styles */
        #projectGrid { padding-bottom: 25px; }
        .hexagon-row { display: flex; justify-content: center; }
        .hexagon-row:not(:first-child) { margin-top: -44px; }
        .hexagon { position: relative; width: 150px; height: 173.21px; margin: 5px; background-color: rgba(255, 85, 0, 0.1); clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%); cursor: pointer; transition: all 0.2s ease-in-out; display: flex; align-items: center; justify-content: center; text-align: center; padding: 10px; flex-shrink: 0; opacity: 0; transition: opacity 0.5s ease-in-out, transform 0.2s ease-in-out; }
        .hexagon.visible { opacity: 1; }
        .hexagon:hover { background-color: rgba(255, 85, 0, 0.3); transform: scale(1.05); z-index: 10; }
        .hexagon-inner { width: 100%; }
        .project-hexagon-name { color: #ff5500; font-weight: bold; word-break: break-word; font-size: 1.1rem; }
        .project-hexagon-count { font-size: 0.8rem; color: #00ff00; }

        /* Progress Bar */
        .progress-bar-container { background-color: #000; border: 1px solid #00ff00; padding: 2px; }
        .progress-bar-fill { background-color: #ff5500; height: 10px; transition: width 0.5s ease-in-out; box-shadow: 0 0 10px rgba(255, 85, 0, 0.7); }

        /* Effects */
        .screen-shake { animation: shake 0.4s cubic-bezier(.36,.07,.19,.97) both; }
        @keyframes shake { 10%, 90% { transform: translate3d(-1px, 0, 0); } 20%, 80% { transform: translate3d(2px, 0, 0); } 30%, 50%, 70% { transform: translate3d(-4px, 0, 0); } 40%, 60% { transform: translate3d(4px, 0, 0); } }
        
        #systemAlert { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0.8); z-index: 10000; padding: 2rem 4rem; font-family: 'VT323', monospace; font-size: 3rem; text-shadow: 0 0 10px; transition: opacity 0.3s ease-out, transform 0.3s ease-out; opacity: 0; pointer-events: none; }
        #systemAlert.show { transform: translate(-50%, -50%) scale(1); opacity: 1; animation: alert-glitch 0.5s 2; }
        .alert-error { background-color: rgba(255, 0, 0, 0.8); border: 2px solid #ff5555; color: #000; text-shadow: 0 0 15px #000; }
        @keyframes alert-glitch { 0% { transform: translate(-50%, -50%) skewX(-5deg); } 10% { transform: translate(-50%, -50%) skewX(5deg); } 20% { transform: translate(-50%, -50%) skewX(-5deg); } 30% { transform: translate(-50%, -50%) skewX(5deg); } 40% { transform: translate(-50%, -50%) skewX(0); } 100% { transform: translate(-50%, -50%) skewX(0); } }

        @keyframes slideIn { from { opacity: 0; transform: translateX(-20px); } to { opacity: 1; transform: translateX(0); } }
        .fade-out { animation: fadeOut 0.4s ease-out forwards; }
        @keyframes fadeOut { from { opacity: 1; } to { opacity: 0; transform: translateX(20px); } }
        .view-transition { animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">

    <div class="eva-panel w-full max-w-4xl rounded-lg p-6">
        <!-- Header -->
        <div class="flex justify-between items-center border-b-2 border-orange-500 pb-4 mb-4">
            <div>
                <h1 class="eva-title text-4xl md:text-5xl">ProduCortex</h1>
                <p id="interface-subtitle" class="text-sm text-green-400">ProdutiveMe // Project Workspace v2.4</p>
            </div>
            <div class="text-right flex items-center gap-2">
                 <div id="homeViewBtn" class="header-nav-btn active">// WORKSPACE</div>
                 <div id="peopleViewBtn" class="header-nav-btn">// PERSONNEL</div>
            </div>
        </div>

        <!-- Project View -->
        <div id="projectView" class="hidden view-transition"></div>
        <!-- Task View -->
        <div id="taskView" class="hidden view-transition"></div>
        <!-- People View -->
        <div id="peopleView" class="hidden view-transition"></div>
    </div>
    
    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="modal-overlay hidden"></div>
    <!-- System Alert Pop-up -->
    <div id="systemAlert"></div>

    <script>
        // --- DATA STATE ---
        let tasks = [];
        let projects = [];
        let people = [];
        let currentProject = null;
        let currentTaskView = 'active';
        const markdownConverter = new showdown.Converter();

        // --- DOM ELEMENT REFERENCES ---
        let projectView, taskView, peopleView, homeViewBtn, peopleViewBtn, confirmationModal;

        // --- DATA HANDLING ---
        function saveData() {
            localStorage.setItem('produCortexTasks', JSON.stringify(tasks));
            localStorage.setItem('produCortexProjects', JSON.stringify(projects));
            localStorage.setItem('produCortexPeople', JSON.stringify(people));
        }

        function loadData() {
            const storedTasks = localStorage.getItem('produCortexTasks');
            if (storedTasks) tasks = JSON.parse(storedTasks);
            
            const storedProjects = localStorage.getItem('produCortexProjects');
            if (storedProjects) {
                if (storedProjects.length > 0 && typeof JSON.parse(storedProjects)[0] === 'string') {
                    const projectNames = JSON.parse(storedProjects);
                    projects = projectNames.map(name => ({ name, archived: false }));
                } else {
                    projects = JSON.parse(storedProjects);
                }
            }
            if (projects.length === 0) {
                projects.push({ name: 'GENERAL', archived: false });
            }

            const storedPeople = localStorage.getItem('produCortexPeople');
            if (storedPeople) people = JSON.parse(storedPeople);
        }

        // --- VIEW MANAGEMENT ---
        function showView(viewName, context = null) {
            [projectView, taskView, peopleView].forEach(v => v.classList.add('hidden'));
            const viewToShow = document.getElementById(viewName);
            viewToShow.classList.remove('hidden');
            
            homeViewBtn.classList.toggle('active', viewName === 'projectView');
            peopleViewBtn.classList.toggle('active', viewName === 'peopleView');
            
            const subtitle = document.getElementById('interface-subtitle');
            if(viewName === 'projectView') {
                 subtitle.textContent = `ProdutiveMe // Project Workspace v2.4`;
                 renderProjects();
            } else if (viewName === 'peopleView') {
                 subtitle.textContent = `ProdutiveMe // Personnel Directory v2.4`;
                 renderPeople();
            } else if (viewName === 'taskView') {
                currentProject = context;
                subtitle.textContent = `ProdutiveMe // ${currentProject} v2.4`;
                renderTaskViewLayout();
            }
        }
        
        // --- MODAL ---
        function showConfirmationModal(title, message, onConfirm) {
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const modalConfirmBtn = document.getElementById('modalConfirmBtn');
            
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            confirmationModal.classList.remove('hidden');
            
            const newConfirmBtn = modalConfirmBtn.cloneNode(true);
            modalConfirmBtn.parentNode.replaceChild(newConfirmBtn, modalConfirmBtn);
            
            newConfirmBtn.addEventListener('click', () => {
                onConfirm();
                confirmationModal.classList.add('hidden');
            });
        }

        // --- CORE LOGIC ---
        function addProject() {
            const newProjectInput = document.getElementById('newProjectInput');
            const projectName = newProjectInput.value.trim().toUpperCase();
            if (projectName && !projects.find(p => p.name === projectName)) {
                projects.push({ name: projectName, archived: false });
                newProjectInput.value = '';
                saveData();
                renderProjects();
            }
        }
        
        function renameProject(oldName, newName) {
            const project = projects.find(p => p.name === oldName);
            const newNameUpper = newName.toUpperCase();
            if (project && newNameUpper && !projects.find(p => p.name === newNameUpper)) {
                project.name = newNameUpper;
                tasks.forEach(t => {
                    if (t.project === oldName) {
                        t.project = newNameUpper;
                    }
                });
                currentProject = newNameUpper;
                saveData();
                renderTaskViewLayout();
            } else {
                renderTaskViewLayout(); // Re-render to restore original name if rename fails
            }
        }

        function archiveProject(projectName) {
            const project = projects.find(p => p.name === projectName);
            if (project) {
                project.archived = true;
                tasks.forEach(task => {
                    if (task.project === projectName && !task.completed) {
                        task.completed = true;
                    }
                });
                saveData();
                showView('projectView');
            }
        }

        function deleteProject(projectName) {
            showConfirmationModal('DELETE PROJECT', `This will permanently delete the project "${projectName}" and all of its tasks. This action cannot be undone.`, () => {
                projects = projects.filter(p => p.name !== projectName);
                tasks = tasks.filter(t => t.project !== projectName);
                saveData();
                showView('projectView');
            });
        }

        function addPerson() {
            const newPersonInput = document.getElementById('newPersonInput');
            const personName = newPersonInput.value.trim();
            if (personName && !people.find(p => p.name.toLowerCase() === personName.toLowerCase())) {
                people.push({ id: Date.now(), name: personName });
                newPersonInput.value = '';
                saveData();
                renderPeople();
            }
        }

        function addTask() {
            const taskInput = document.getElementById('taskInput');
            const taskText = taskInput.value.trim();
            if (taskText === '' || !currentProject) return;
            tasks.push({ id: Date.now(), text: taskText, project: currentProject, description: '', completed: false });
            taskInput.value = '';
            saveData();
            renderTasks();
            updateProgressBar();
        }

        function getAssignedPeople(task) {
            const combinedText = task.text + ' ' + task.description;
            const mentions = combinedText.match(/@(\w+)/g) || [];
            if (!mentions) return [];
            return people.filter(p => mentions.some(m => m.toLowerCase() === `@${p.name.toLowerCase()}`));
        }
        
        function highlightMentions(text) {
            if (people.length === 0) return text;
            const registeredNames = people.map(p => p.name);
            const regex = new RegExp(`@(${registeredNames.join('|')})`, 'gi');
            return text.replace(regex, '<span class="mention">@$1</span>');
        }

        // --- RENDERING ---
        function renderProjects() {
            const projectGrid = document.getElementById('projectGrid');
            projectGrid.innerHTML = '';
            const activeProjects = projects.filter(p => !p.archived).sort((a, b) => a.name.localeCompare(b.name));
            
            if (activeProjects.length === 0) {
                 projectGrid.innerHTML = `<p class="text-center text-gray-500">[ No active projects ]</p>`;
                 return;
            }

            const gridWidth = projectGrid.offsetWidth;
            const hexagonWidth = 150;
            const hexagonMargin = 10;
            const hexagonEffectiveWidth = hexagonWidth + hexagonMargin;
            const itemsPerRow = Math.max(1, Math.floor(gridWidth / hexagonEffectiveWidth));
            const itemsPerOffsetRow = itemsPerRow > 1 ? itemsPerRow - 1 : 1;

            let projectIndex = 0;
            let isOffsetRow = false;

            while (projectIndex < activeProjects.length) {
                const rowDiv = document.createElement('div');
                rowDiv.className = 'hexagon-row';

                const itemsThisRow = isOffsetRow ? itemsPerOffsetRow : itemsPerRow;
                
                if (isOffsetRow && itemsPerRow > 1) {
                    rowDiv.style.marginLeft = `${hexagonEffectiveWidth / 2}px`;
                }

                const projectsForThisRow = activeProjects.slice(projectIndex, projectIndex + itemsThisRow);

                projectsForThisRow.forEach(project => {
                    const hexagon = document.createElement('div');
                    hexagon.className = 'hexagon';
                    hexagon.onclick = () => showView('taskView', project.name);
                    
                    setTimeout(() => {
                        hexagon.classList.add('visible');
                    }, Math.random() * 1500);

                    const inner = document.createElement('div');
                    inner.className = 'hexagon-inner';

                    const nameEl = document.createElement('div');
                    nameEl.className = 'project-hexagon-name';
                    nameEl.textContent = project.name;
                    
                    const countEl = document.createElement('div');
                    countEl.className = 'project-hexagon-count';
                    const activeTasks = tasks.filter(t => t.project === project.name && !t.completed).length;
                    countEl.textContent = `${activeTasks} active directives`;
                    
                    inner.appendChild(nameEl);
                    inner.appendChild(countEl);
                    hexagon.appendChild(inner);
                    rowDiv.appendChild(hexagon);
                });

                projectGrid.appendChild(rowDiv);
                projectIndex += itemsThisRow;
                isOffsetRow = !isOffsetRow;
            }
        }
        
        function renderPeople() {
            const peopleGrid = document.getElementById('peopleGrid');
            const personTaskView = document.getElementById('personTaskView');
            peopleGrid.innerHTML = '';
            personTaskView.classList.add('hidden');
            people.sort((a,b) => a.name.localeCompare(b.name)).forEach(person => {
                const card = document.createElement('div');
                card.className = 'person-card p-4 rounded-md flex justify-between items-center cursor-pointer hover:bg-cyan-900/50';
                card.onclick = () => renderTasksForPerson(person);

                const nameEl = document.createElement('span');
                nameEl.className = 'text-cyan-400 text-lg';
                nameEl.textContent = person.name;

                const taskCount = tasks.filter(t => getAssignedPeople(t).some(p => p.id === person.id) && !t.completed).length;
                const countEl = document.createElement('span');
                countEl.className = 'text-sm';
                countEl.textContent = `${taskCount} active`;
                
                card.appendChild(nameEl);
                card.appendChild(countEl);
                peopleGrid.appendChild(card);
            });
        }
        
        function renderTasksForPerson(person) {
            const personTaskView = document.getElementById('personTaskView');
            const personTaskTitle = document.getElementById('personTaskTitle');
            const personTaskList = document.getElementById('personTaskList');
            personTaskView.classList.remove('hidden');
            personTaskTitle.textContent = `// Directives assigned to: ${person.name}`;
            personTaskList.innerHTML = '';
            
            const assignedTasks = tasks.filter(t => getAssignedPeople(t).some(p => p.id === person.id));

            if (assignedTasks.length === 0) {
                 personTaskList.innerHTML = `<p class="text-center text-gray-500">[ No directives assigned ]</p>`;
                 return;
            }
            assignedTasks.forEach(task => personTaskList.appendChild(createTaskElement(task, true)));
        }

        function updateProgressBar() {
            const projectTasks = tasks.filter(t => t.project === currentProject);
            const completedTasks = projectTasks.filter(t => t.completed).length;
            const totalTasks = projectTasks.length;
            const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
            
            const progressBarFill = document.querySelector('.progress-bar-fill');
            const progressText = document.querySelector('#progressText');
            if (progressBarFill) progressBarFill.style.width = `${progress}%`;
            if (progressText) progressText.textContent = `${completedTasks} / ${totalTasks}`;
        }

        function renderTaskViewLayout() {
            taskView.innerHTML = `
                <div class="border-b-2 border-orange-500 pb-4 mb-4">
                    <div class="flex justify-between items-center">
                        <h2 id="task-view-title" class="eva-title text-4xl cursor-pointer" title="Double-click to rename">${currentProject}</h2>
                        <button id="backToProjectsBtn" class="eva-button text-sm px-3 py-2 rounded-md">&lt;&lt; WORKSPACE</button>
                    </div>
                    <div class="flex gap-2 mt-2">
                        <button id="archiveProjectBtn" class="eva-button text-xs !bg-yellow-600 !border-yellow-600 hover:!text-yellow-500">ARCHIVE</button>
                        <button id="deleteProjectBtn" class="eva-button text-xs !bg-red-600 !border-red-600 hover:!text-red-500">DELETE</button>
                    </div>
                </div>
                <div class="mb-4">
                    <div class="flex justify-between text-xs mb-1">
                        <span>PROGRESS</span>
                        <span id="progressText"></span>
                    </div>
                    <div class="progress-bar-container">
                        <div class="progress-bar-fill"></div>
                    </div>
                </div>
                <div class="flex flex-col sm:flex-row gap-2 mb-4">
                    <input type="text" id="taskInput" class="eva-input flex-grow p-3 rounded-md text-lg" placeholder="[ Enter new directive... ]">
                    <button id="addTaskBtn" class="eva-button p-3 rounded-md">SYNC_TASK</button>
                </div>
                <div class="flex justify-end gap-2 mb-4">
                    <button id="viewActiveBtn" class="view-toggle active">Ativas</button>
                    <button id="viewArchivedBtn" class="view-toggle">Arquivadas</button>
                </div>
                <div id="taskList" class="space-y-3"></div>`;

            // Re-bind events for the new content
            document.getElementById('backToProjectsBtn').addEventListener('click', () => showView('projectView'));
            document.getElementById('addTaskBtn').addEventListener('click', addTask);
            document.getElementById('taskInput').addEventListener('keypress', (e) => { if (e.key === 'Enter') addTask(); });
            document.getElementById('archiveProjectBtn').addEventListener('click', () => archiveProject(currentProject));
            document.getElementById('deleteProjectBtn').addEventListener('click', () => deleteProject(currentProject));
            
            const viewActiveBtn = document.getElementById('viewActiveBtn');
            const viewArchivedBtn = document.getElementById('viewArchivedBtn');
            viewActiveBtn.addEventListener('click', () => { currentTaskView = 'active'; viewActiveBtn.classList.add('active'); viewArchivedBtn.classList.remove('active'); renderTasks(); });
            viewArchivedBtn.addEventListener('click', () => { currentTaskView = 'archived'; viewArchivedBtn.classList.add('active'); viewActiveBtn.classList.remove('active'); renderTasks(); });
            
            const titleEl = document.getElementById('task-view-title');
            titleEl.addEventListener('dblclick', () => {
                const oldName = titleEl.textContent;
                const input = document.createElement('input');
                input.type = 'text';
                input.value = oldName;
                input.className = 'eva-input text-4xl w-full';
                titleEl.replaceWith(input);
                input.focus();
                
                const save = () => {
                    const newName = input.value.trim();
                    renameProject(oldName, newName || oldName);
                };
                
                input.addEventListener('blur', save);
                input.addEventListener('keypress', e => { if (e.key === 'Enter') input.blur(); });
            });
            
            updateProgressBar();
            renderTasks();
        }

        function renderTasks() {
            const taskList = document.getElementById('taskList');
            if (!currentProject || !taskList) return;
            taskList.innerHTML = '';
            const filteredTasks = tasks.filter(t => t.project === currentProject && (currentTaskView === 'active' ? !t.completed : t.completed));
            if (filteredTasks.length === 0) {
                taskList.innerHTML = `<p class="text-center text-gray-500">[ No directives in this sector ]</p>`;
            }
            filteredTasks.forEach(task => taskList.appendChild(createTaskElement(task)));
        }

        function createTaskElement(task, showProjectName = false) {
            const container = document.createElement('div');
            container.className = 'task-item-container rounded-md';
            if (task.completed) container.classList.add('completed');

            const header = document.createElement('div');
            header.className = 'flex items-center justify-between p-3';
            
            const titleContainer = document.createElement('div');
            titleContainer.className = 'flex-grow';
            const title = document.createElement('span');
            title.className = 'task-title';
            title.innerHTML = highlightMentions(task.text);
            
            if (showProjectName) {
                const projectNameEl = document.createElement('span');
                projectNameEl.className = 'text-xs text-orange-400 block';
                projectNameEl.textContent = `Project: ${task.project}`;
                titleContainer.appendChild(title);
                titleContainer.appendChild(projectNameEl);
            } else {
                 titleContainer.appendChild(title);
            }

            const assignedContainer = document.createElement('div');
            assignedContainer.className = "flex items-center mt-1";
            getAssignedPeople(task).forEach(person => {
                const avatar = document.createElement('div');
                avatar.className = 'assigned-person-avatar';
                avatar.textContent = person.name.substring(0, 1).toUpperCase();
                avatar.title = person.name;
                assignedContainer.appendChild(avatar);
            });
            if(assignedContainer.hasChildNodes()) {
                titleContainer.appendChild(assignedContainer);
            }
            header.appendChild(titleContainer);

            const buttons = document.createElement('div');
            buttons.className = 'flex gap-2 ml-4 flex-shrink-0';
            const completeBtn = document.createElement('button');
            completeBtn.className = 'complete-btn text-xs px-2 py-1 rounded';
            completeBtn.textContent = task.completed ? 'UNARCHIVE' : 'COMPLETE';
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn text-xs px-2 py-1 rounded';
            deleteBtn.textContent = 'DELETE';
            buttons.appendChild(completeBtn);
            buttons.appendChild(deleteBtn);
            header.appendChild(buttons);
            container.appendChild(header);

            const details = document.createElement('div');
            details.className = 'task-details p-3 pt-2 hidden';
            const textarea = document.createElement('textarea');
            textarea.className = 'description-textarea w-full p-2 rounded-md h-24';
            textarea.placeholder = 'Add description (Markdown supported)...';
            textarea.value = task.description;
            const rendered = document.createElement('div');
            rendered.className = 'rendered-markdown p-2';
            rendered.innerHTML = highlightMentions(markdownConverter.makeHtml(task.description));
            const saveBtn = document.createElement('button');
            saveBtn.className = 'eva-button text-xs px-2 py-1 rounded mt-2';
            saveBtn.textContent = 'SAVE_DESC';
            details.appendChild(textarea);
            details.appendChild(rendered);
            details.appendChild(saveBtn);
            container.appendChild(details);
            
            if (task.description) {
                textarea.classList.add('hidden');
                saveBtn.classList.add('hidden');
            } else {
                rendered.classList.add('hidden');
            }

            title.addEventListener('dblclick', () => {
                const currentText = task.text;
                const input = document.createElement('input');
                input.type = 'text';
                input.value = currentText;
                input.className = 'eva-input w-full';
                
                title.innerHTML = '';
                title.appendChild(input);
                input.focus();

                const save = () => {
                    const taskToUpdate = tasks.find(t => t.id === task.id);
                    if (taskToUpdate) {
                        taskToUpdate.text = input.value.trim() || currentText;
                        saveData();
                        renderTasks();
                    }
                };

                input.addEventListener('blur', save);
                input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') input.blur();
                });
            });

            title.addEventListener('click', (e) => {
                if (e.target.tagName !== 'INPUT' && e.detail === 1) {
                    setTimeout(() => {
                         if(details) details.classList.toggle('hidden');
                    }, 200);
                }
            });
            
            const handleAction = (action) => {
                container.classList.add('fade-out');
                setTimeout(() => {
                    action();
                    saveData();
                    const personTaskView = document.getElementById('personTaskView');
                    if (!personTaskView || personTaskView.classList.contains('hidden')) {
                        renderTasks();
                        updateProgressBar();
                    } else {
                        const personTaskTitle = document.getElementById('personTaskTitle');
                        const personName = personTaskTitle.textContent.replace('// Directives assigned to: ', '');
                        const person = people.find(p => p.name === personName);
                        if (person) renderTasksForPerson(person);
                    }
                }, 400);
            };

            completeBtn.addEventListener('click', () => handleAction(() => {
                const taskToUpdate = tasks.find(t => t.id === task.id);
                if(taskToUpdate) taskToUpdate.completed = !taskToUpdate.completed;
            }));
            deleteBtn.addEventListener('click', () => handleAction(() => tasks = tasks.filter(t => t.id !== task.id)));

            saveBtn.addEventListener('click', () => {
                const taskToUpdate = tasks.find(t => t.id === task.id);
                if(taskToUpdate) taskToUpdate.description = textarea.value;
                rendered.innerHTML = highlightMentions(markdownConverter.makeHtml(textarea.value));
                textarea.classList.add('hidden');
                saveBtn.classList.add('hidden');
                rendered.classList.remove('hidden');
                saveData();
                renderTasks();
            });

            rendered.addEventListener('click', () => {
                rendered.classList.add('hidden');
                textarea.classList.remove('hidden');
                saveBtn.classList.remove('hidden');
            });

            return container;
        }

        // --- IMMERSIVE EFFECTS ---
        function triggerScreenShake() {
            document.body.classList.add('screen-shake');
            setTimeout(() => {
                document.body.classList.remove('screen-shake');
            }, 400);
        }

        function showSystemAlert() {
            const alertEl = document.getElementById('systemAlert');
            const alertTypes = [
                { text: '!! ERROR !!', class: 'alert-error' },
                { text: '>> CONNECTION LOST <<', class: 'alert-error' },
                { text: '!! KERNEL PANIC !!', class: 'alert-error' },
                { text: '!! SYNCHRONIZATION FAILURE !!', class: 'alert-error' },
            ];
            const randomAlert = alertTypes[Math.floor(Math.random() * alertTypes.length)];
            
            alertEl.textContent = randomAlert.text;
            alertEl.className = '';
            alertEl.classList.add(randomAlert.class, 'show');

            setTimeout(() => {
                alertEl.classList.remove('show');
            }, (Math.random() * 1000) + 800);
        }

        // --- INITIAL LOAD & BINDING ---
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('projectView').innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h2 class="eva-title text-2xl">// WORKSPACE</h2>
                </div>
                <div id="projectGrid" class="flex-grow"></div>
                <div id="newProjectSection" class="border-t-2 border-orange-500 pt-4 mt-4">
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="text" id="newProjectInput" class="eva-input flex-grow p-3 rounded-md text-lg" placeholder="[ New Project Name ]">
                        <button id="addProjectBtn" class="eva-button p-3 rounded-md">CREATE_PROJECT</button>
                    </div>
                </div>`;
            document.getElementById('peopleView').innerHTML = `
                <div class="flex justify-between items-center mb-4"><h2 class="eva-title text-2xl">// PERSONNEL</h2></div>
                <div id="peopleGrid" class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 min-h-[120px]"></div>
                <div class="border-t-2 border-orange-500 pt-4">
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="text" id="newPersonInput" class="eva-input flex-grow p-3 rounded-md text-lg" placeholder="[ New Person's Name ]">
                        <button id="addPersonBtn" class="eva-button p-3 rounded-md">REGISTER_PERSON</button>
                    </div>
                </div>
                <div id="personTaskView" class="hidden mt-6">
                    <h3 id="personTaskTitle" class="eva-title text-xl mb-4"></h3>
                    <div id="personTaskList" class="space-y-3"></div>
                </div>`;
            document.getElementById('confirmationModal').innerHTML = `
                <div class="eva-panel p-6 rounded-lg text-center max-w-sm">
                    <h3 id="modalTitle" class="eva-title text-2xl mb-4">CONFIRM ACTION</h3>
                    <p id="modalMessage" class="mb-6">Are you sure?</p>
                    <div class="flex justify-center gap-4">
                        <button id="modalConfirmBtn" class="eva-button !bg-red-600 !border-red-600 hover:!text-red-600 px-6 py-2">CONFIRM</button>
                        <button id="modalCancelBtn" class="eva-button px-6 py-2">CANCEL</button>
                    </div>
                </div>`;

            projectView = document.getElementById('projectView');
            taskView = document.getElementById('taskView');
            peopleView = document.getElementById('peopleView');
            homeViewBtn = document.getElementById('homeViewBtn');
            peopleViewBtn = document.getElementById('peopleViewBtn');
            confirmationModal = document.getElementById('confirmationModal');

            loadData();

            homeViewBtn.addEventListener('click', () => showView('projectView'));
            peopleViewBtn.addEventListener('click', () => showView('peopleView'));
            document.getElementById('addProjectBtn').addEventListener('click', addProject);
            document.getElementById('newProjectInput').addEventListener('keypress', (e) => { if (e.key === 'Enter') addProject(); });
            document.getElementById('addPersonBtn').addEventListener('click', addPerson);
            document.getElementById('newPersonInput').addEventListener('keypress', (e) => { if (e.key === 'Enter') addPerson(); });
            document.getElementById('modalCancelBtn').addEventListener('click', () => confirmationModal.classList.add('hidden'));
            
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    if (!projectView.classList.contains('hidden')) {
                        renderProjects();
                    }
                }, 250);
            });

            // Initialize immersive effects
            setTimeout(() => {
                setInterval(triggerScreenShake, (Math.random() * 30000) + 30000);
                setInterval(showSystemAlert, (Math.random() * 45000) + 45000);
            }, 120000);

            showView('projectView');
        });
    </script>
</body>
</html>
